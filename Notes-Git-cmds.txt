-------------------------------------------
Git commands
-------------------------------------------

Create a branch for your changes
git checkout -b BUG_description master

List branch: -a=all local/remote, -r=remote only
git branch
git branch -a
git branch -r

Create the upstream branch counterpart / push
git push origin username-getting-started:username-getting-started

Checkout remote branch
git fetch origin
git checkout -b test origin/test

Add files
git add .   # add to index only files created/modified and not those deleted
git add -u  # add to index only files deleted/modified and not those created
git add -A  # do both operation at once, add to index all files

Commit
git commit -m "message"

git commit --amend

Rename branch
git branch -m <oldname> <newname>
Rename current branch
git branch -m <newname>

Show list all files for a commit
git show --name-only
git show --pretty="format:" --name-only <SHA>

Diff of last commit
git log -p -1
git show <SHA>

Diff of 1 file between 2 commits
git diff HEAD^^ HEAD <filename>
git diff <SHA> <SHA> <filename>

Revert 1 file to previous commit
git checkout <commit> <filename>

History of a file
git log -- [filename]

Revert a file
git checkout [SHA] [filename]

Delete local branch
git branch -d the_local_branch

Delete remote branch
git push origin :remote_branch

Recover deleted branch
git checkout -b <branch> <sha>

Setting your branch to exactly match the remote branch can be done in two steps:
Also used to pull after a forced push on remote:
git fetch origin
git reset --hard origin/master
git clean -df

Rebase / Squash
git rebase -i HEAD~2

Undoing a git rebase
git reflog
git reset --hard HEAD@{5}

Stash
git stash
git stash list
git stash apply
git stash clear

Preview files before pull
git fetch
git diff ...origin --name-status

Git pull does these
git fetch
git merge origin/master

Merge branch as one commit
git checkout master
git merge --squash bugfix
git commit

-----------------------------------
Delete git-tracking of a local repository
rm -rf .git

Git warning: you may want to set your diff.renamelimit variable
http://www.sw33tcode.com/?p=31
git config merge.renameLimit 999999
git config --unset merge.renameLimit

-----------------------------------
http://stackoverflow.com/questions/4556467/git-pull-or-git-merge-between-master-and-development-branches

This workflow works best for me:

git checkout -b develop

...make some changes...
...notice master has been updated...
...commit changes to develop...

git checkout master
git pull

...bring those changes back into develop...

git checkout develop
git rebase master

...make some more changes...
...commit them to develop...
...merge them into master...

git checkout master
git pull
git merge develop

=================================================================

Sublime Find
-*/.dist/*, -*/target/*, -*/test/*

-------------------------------------------
vi commands
i   insert before cursor
:w  save file
:q  quit
:q! discard changes and quit

-------------------------------------------
PATH=$PATH:$HOME/bin

-------------------------------------------
Deleted all installed ruby gems
gem list | cut -d" " -f1 | xargs gem uninstall -aIx

View Gem environment configs
gem environment

-------------------------------------------
vi .bash_profile
PS1='\n\e[0;32m\u\e[m \e[0;33m\w\e[m\n$ '

=================================================================

npm list --depth=0
npm list -g

npm view jquery versions
npm install jquery@1.12.1 --save
npm uninstall jquery@1.12.1 --save
npm prune

npm outdated
npm update jquery --save

npm init --force

delete 'node_modules' folder:
rm -r node_modules/

var $ = require("jquery");

=================================================================

cd xampp/mysql/bin/

mysql -u root -p -h 127.0.0.1

----------------------------------------------

show databases;

use <databasename>;

show tables;

describe <tablename>;

----------------------------------------------

create table announcements(id int(11) unsigned auto_increment primary key not null, title varchar(255), message varchar(510) not null, updated_at timestamp default current_timestamp on update current_timestamp);

insert into <tablename>(column1) values('value1');

update <tablename> set username='Example' where id=3;

delete from <tablename> where id=1;

delete from <tablename> where id IN(1,2);

alter table <tablename> drop column <columnname>;

alter table <tablename> add column <columnname> <datatype>;

alter table <tablename> modify <column> <definitions>; 

drop table <tablename>;

rename table <tablename> to <table_newname>;

----------------------------------------------

select * from <tablename>;

select * from <tablename> where id=1;

select * from <tablename> where username='Name' order by id DESC;

select * from <tablename> where 1 order by rand() limit 10;

select distinct artist,album from <tablename> where 1;

select max(track) from <tablename>

select * from <tablename> where username rlike('the');

select * from <tablename> where username rlike('the') and rlike('you');

select * from <tablename> where username rlike('the') or rlike('you');

select * from <tablename> where username rlike('the') or (rlike('you') and rlike('me'));

select count(*) from <tablename> where username rlike('the');

----------------------------------------------

Get last row:
select * from <tablename> order by id desc limit 1;

Get count of rows:
select count(*) from <tablename>;

----------------------------------------------

select count(*) as count, creator from <tablename> group by (creator) order by count desc limit 10;

+-------+---------+
| count | creator |
+-------+---------+
| 36030 | name    |
| 21401 | name    |
+-------+---------+
10 rows in set (0.08 sec)

----------------------------------------------

backslash to escape: \'

=================================================================

pstree -p <username>

kill -9 <pid>

----------------------------------------------

touch text.txt

stat text.txt

=================================================================

